1.on-connect
  get socket.id
  show search-button
  emit(adduser, with user-id and game-id)


2. when push search-button
  emit(searchRoomEvent)
    which answer emit(prepareToJoin)
    and listen on(attemptToJoin)
    and send emit(onJoin, with pair and joining=true)

3. on(onJoin) into joining === true,
      setState theySeeEachOther = true
      and filtering Users to this-and-thatUser

4. if 'theySeeEachOther' + 'betArray' + 'robImages'
      start to show game.

5. on('console') - emit for debuging
   on('receiveChat') - answer emit for multi-game
   emit('letterFlag') - for sending data-broadcast
        hisLetter: true | false
        hisGuessArr: guessArr
        gameState: sameQuestion
                   turnQuestion
                   prepareToGameEnd


          if(hisLetter === false) next create new Image by next picNum
          if(hisLetter === true)
              1. gameState === 'sameQuestion'
                  setState thatGuessArr: hisGuessArr
              2. gameState === 'turnQuestion'
                  setState thatDots + 1 ; thatGuessArr: hisGuessArr
                  call nextQuestion() 1800 ms
                  call disableAllBtns()
                   ...into code setState thisDots +1
              3. gameState === 'prepareToGameEnd'
                    emit ->'thatUserProgress'
                    with
                     thatUser: {
                      'client_id':client_id,
                      'that_coins':this.state.coins,
                      'that_Dots':this.state.thisDots
                    }
                    object

                P.S. 'prepareToGameEnd' gameState initialize "thisUser"
                and below he is emiting -> 'thisUserProgress'
                with
                thisUser: {
                  'client_id':client_id,
                  'this_coins':coins,
                  'this_Dots':this.state.thisDots+1,
                }
                object

        on Node.js, we create new Object named 'partners' , and fill it
        with objects of both users (thisUser and thatUser)

  6. on Node.js we find out who the winner is and who is defeated
     based on the number of wins on rounds.
     count summary of coins
     if(thisOne.this_Dots > thatOne.that_Dots)
        winner_id = thisOne.client_id
        looser_id = thatOne.client_id
     else
        conversely

        6.2 winner_id.emit("onGameEnd", allCoins = allCoins)
          looser_id.emit("onGameEnd", allCoins = zeroCoins)
          set state of coins = allCoins
          and call this.gameEnd() - function with setTimeout 2 sec.
          after that call panel
